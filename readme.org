#+title: Readme


A simple MCP server for emacs introspection through the emacsclient daemon.

This server currently provides five tools for interacting with Emacs:

1. `describe_function` - Retrieves documentation for Emacs functions
2. `describe_variable` - Retrieves documentation for Emacs variables
3. `get_variable_value` - Gets the current value of an Emacs variable (e.g., use `buffer-list` to get all buffers)
4. `view_buffer` - Gets the contents of a specific buffer and saves it to a file for analysis
5. `get_agenda` - Gets the org-agenda view
* *Warning*

All of these evaluate elisp via the emacsclient, though they do so in the following controlled ways:


#+begin_src bash
`emacsclient -e "(documentation '$FUNCTION_NAME)"`
`emacsclient -e "(documentation-property '$VARIABLE_NAME 'variable-documentation)"`
`emacsclient -e "(symbol-value '$VARIABLE_NAME)"`
#+end_src

The security measures to prevent weird injections from the LLM are:
- Using ', which in my understanding prevents evaluation of the form following it, unlike backtick (which would be vulnerable to an LLM passing in a , to escape the quoting.)
- Using execFile with shell=false to on the typescript side, to prevent shell injection
- Sanitized with this regexp:

#+begin_src ts
const isValidEmacsSymbol = (str: string) => /^[a-zA-Z0-9-_]+$/.test(str);
#+end_src

* Installation
** Claude Code

To add this MCP server to Claude Code CLI:

#+begin_src bash
claude mcp add -s user emacs-introspection npx @lnajt/emacs-introspection-mcp
#+end_src

*** Configuration

The `view_buffer` and `get_agenda` functions write temporary files to `/tmp/ClaudeWorkingFolder/`. You need to add this directory to your Claude Code settings to allow access.

Add the following to your `~/.claude/settings.json` under permissions.

#+begin_src json
{
  "additionalDirectories": ["/tmp/ClaudeWorkingFolder"]
}
#+end_src

You can then use Claude Code with Emacs introspection capabilities:
- Ask about Emacs functions: "What does the `save-buffer` function do?"
- Get variable values: "What buffers are currently open in Emacs?"
- View buffer contents: "Show me the contents of my *scratch* buffer"
- Check your org agenda: "What's on my agenda today?"


** Gptel

First, set up [[https://github.com/karthink/gptel][gptel]] and [[https://github.com/lizqwerscott/mcp.el][mcp.el]] .

Then, add this to your the mcp-hub-servers variable:

#+begin_src emacs-lisp :tangle yes
("emacs_introspection" . (:command "npx" :args ("-y" "@lnajt/emacs-introspection-mcp")) )
#+end_src


* Implementation details

** describe_function
Gets the documentation for an Emacs function by name.
- Parameter: function_name (string)
- Implementation: Uses `emacsclient` to call `(documentation 'function-name)`

** describe_variable
Gets the documentation for an Emacs variable by name.
- Parameter: variable_name (string)
- Implementation: Uses `emacsclient` to call `(documentation-property 'variable-name 'variable-documentation)`

** get_variable_value
Gets the current value of an Emacs variable by name.
- Parameter: variable_name (string)
- Implementation: Uses `emacsclient` to call `(symbol-value 'variable-name )`
- Example: Use `buffer-list` to get a list of all buffers

** view_buffer
Gets the contents of a specific Emacs buffer and writes it to a temporary file.
- Parameter: buffer_name (string)
- Implementation: Uses `emacsclient` to call `(with-current-buffer "buffer-name" (buffer-string))`
- Returns: File path where buffer content was saved for analysis
- Temporary files: Saved to `/tmp/ClaudeWorkingFolder/<buffer_name>.txt`

** get_agenda
Gets the org-agenda view and writes it to a temporary file.
- Parameter: agenda_type (string, optional, defaults to "a")
- Implementation: Uses `emacsclient` to call `(save-window-excursion (let ((org-agenda-window-setup 'current-window)) (org-agenda nil "agenda-type") (with-current-buffer "*Org Agenda*" (write-file "path"))))`
- Returns: File path where agenda content was saved for analysis
- Temporary files: Saved to `/tmp/ClaudeWorkingFolder/agenda_<agenda_type>.txt`
