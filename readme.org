#+title: Emacs Introspection MCP Server

Work in progress!

A comprehensive MCP server for Emacs introspection through the emacsclient daemon. This server provides tools for exploring Emacs functions, variables, buffers, keymaps, and more.

* Available Tools

** Meta-Tools (Recommended for AI Agents)
- `emacs_describe` - Get comprehensive documentation for any Emacs symbol (function, variable, or both). Handles Lisp-2 namespace correctly with optional type parameter
- `emacs_search` - Search for symbols with pattern matching and type filtering (commands, functions, variables, or all) 
- `emacs_buffer_info` - Complete buffer analysis including content, modes, variables, and metadata (outputs to file)
- `emacs_keymap_analysis` - Analyze major and minor mode keymaps for a buffer context (outputs to file)

** Core Introspection Tools
- `get_variable_value` - Get current value of any Emacs variable (e.g., `emacs-version`, `tab-width`)
- `get_buffer_list` - Get list of all live buffers with optional detailed information

** Buffer Operations
- `view_buffer` - Get buffer contents with line numbers (outputs to file)
- `open_file` - Open a file in Emacs in background and return buffer name

** Syntax & Code Analysis
- `check_parens` - Validate parentheses balance in Lisp code files (opens fresh from disk)

** Org Mode Integration
- `get_agenda` - Retrieve org-agenda view with customizable agenda type (outputs to file)
* *Warning*

All tools evaluate elisp via the emacsclient with controlled security measures. The server uses various elisp operations including symbol introspection, buffer operations, apropos searches, and advanced buffer/keymap analysis.

The security measures to prevent injections include:
- Using single quotes (') to prevent evaluation of forms, unlike backtick which would be vulnerable to comma escaping
- Using execFile with shell=false to prevent shell injection on the TypeScript side
- Symbol validation with regexp: `/^[a-zA-Z0-9-_:]+$/` for symbols and additional validation for buffer names and file paths
- Buffer name validation to prevent path traversal attacks

Additionally, `open_file` and `view_buffer` in combination allow reading any file on your computer. If you also allow Claude unbounded internet access, this creates exfiltration risks ( https://simonwillison.net/tags/lethal-trifecta/ ).

* Installation
** Claude Code

To add this MCP server to Claude Code CLI:

#+begin_src bash
claude mcp add -s user emacs-introspection npx @lnajt/emacs-introspection-mcp
#+end_src

*** Configuration

The `view_buffer` and `get_agenda` functions write temporary files to `/tmp/ClaudeWorkingFolder/`. You need to add this directory to your Claude Code settings to allow access.

Add the following to your `~/.claude/settings.json` under permissions.

#+begin_src json
{
  "additionalDirectories": ["/tmp/ClaudeWorkingFolder"]
}
#+end_src

You can then use Claude Code with Emacs introspection capabilities:
- Ask about Emacs functions: "What does the `save-buffer` function do?"
- Get variable values: "What buffers are currently open in Emacs?"
- View buffer contents: "Show me the contents of my *scratch* buffer"
- Analyze buffer context: "What keybindings are available in my current buffer?"
- Check your org agenda: "What's on my agenda today?"
- Explore Emacs symbols: "Find all commands related to 'save'"


** Gptel

First, set up [[https://github.com/karthink/gptel][gptel]] and [[https://github.com/lizqwerscott/mcp.el][mcp.el]] .

Then, add this to your the mcp-hub-servers variable:

#+begin_src emacs-lisp :tangle yes
("emacs_introspection" . (:command "npx" :args ("-y" "@lnajt/emacs-introspection-mcp")) )
#+end_src


* Recommended Usage

** For AI Agents
The meta-tools are specifically designed for optimal AI agent experience:

- **`emacs_describe`** - Provides comprehensive symbol documentation with proper Lisp-2 namespace handling
- **`emacs_search`** - Unified search interface with type filtering for efficient symbol discovery
- **`emacs_buffer_info`** - Complete buffer context including modes, variables, and content
- **`emacs_keymap_analysis`** - Contextual keymap information for understanding available commands

** Common Workflows
1. **Exploring Unknown Codebase**: `emacs_buffer_info` → `emacs_search` → `emacs_describe`
2. **Understanding Functions**: `emacs_search` → `emacs_describe` (with key bindings)
3. **Buffer Investigation**: `get_buffer_list` → `emacs_buffer_info` → `view_buffer`
4. **Workflow Analysis**: `get_agenda` → `emacs_buffer_info` for org files

** File Output Benefits
Large results are written to `/tmp/ClaudeWorkingFolder/` enabling:
- Analysis of extensive data without token limits
- Further processing with other tools
- Persistent reference during conversation

* LSP Support

LSP tools (`eglot_help_at_point`, `eglot_find_definition`, `eglot_find_references`) are available in `/src/eglot-tools.ts` but currently not working. They require proper eglot configuration and will be integrated when LSP support is functional.

* Implementation Details

** Security Measures
All tools evaluate elisp via emacsclient with controlled security:
- Uses single quotes to prevent evaluation (no backtick vulnerability)
- Uses `execFile` with `shell=false` to prevent shell injection
- Symbol validation with regexp: `/^[a-zA-Z0-9-_]+$/` for basic symbols
- Buffer name validation to prevent path traversal

** File Output
Large data (buffers, keymaps, agenda) is written to `/tmp/ClaudeWorkingFolder/` to handle size limitations and enable further analysis with other tools.

** Core Functions
The server implements the following elisp operations:
- **Symbol Documentation**: `(describe-function)` and `(describe-variable)` with comprehensive Help buffer output
- **Variable Values**: `(symbol-value 'symbol)`  
- **Buffer Lists**: `(buffer-list)` with optional detailed buffer information including file paths, sizes, and modification status
- **Buffer Content**: `(with-current-buffer "name" (buffer-string))` with line numbering and metadata
- **Symbol Search**: Unified interface to `apropos-*` functions with type filtering (commands, functions, variables, all)
- **Buffer Analysis**: Complete mode, variable, and content introspection with mode descriptions
- **Keymap Analysis**: Major and minor mode keymap exploration with comprehensive key binding analysis
- **Syntax Checking**: `check-parens` integration for Lisp code validation with precise error location reporting
- **File Operations**: Background file opening with `find-file-noselect` and buffer name return
- **Org Integration**: Agenda view extraction with customizable agenda types

** Testing
All tools have been tested and verified working with:
- Emacs 30.1 
- Basic connection and variable retrieval
- Buffer operations and error handling
- Symbol search and documentation
- Meta-tools for comprehensive analysis
- Org agenda integration
- Syntax checking capabilities
